#!/bin/bash

# TODO: Add steps to run `doom sync`
# TODO: Add steps for choosing _deskmod to utilize

spinner_pid=
host_font_dir="$HOME/.local/share/fonts"
host_org_notes_dir="$HOME/notes/tome"
host_work_dirs=("$HOME/work/priming" "$HOME/work/sandbox" "$HOME/work/projects")
stow_font_dir="fonts"
non_base_config=("_deskmod" ".git" "$stow_font_dir" "emacs")

function start_spinner {
    set +m
    echo -en "$1          "
    { while : ; do for X in '  .     ' '   .    ' '    .   ' '     .  ' '      . ' '     .  ' '    .   ' '   .    ' '  .     ' ' .      ' ; do echo -en "\b\b\b\b\b\b\b\b$X" ; sleep 0.1 ; done ; done & } 2>/dev/null
    spinner_pid=$!
}

function stop_spinner {
    { kill -9 $spinner_pid && wait; } 2>/dev/null
    set -m
    echo -e "\n"
    #echo -en "\033[2K\r"
}

function spinner {
    start_spinner "$1"
    sleep 1.5
    stop_spinner
}

if [[ $EUID -eq 0 ]]; then
    printf "Please run as normal user.\n" >&2
    exit 1
fi

spinner "\nInitiating system provisioning... "

echo -e "Script requires sudo privileges for package installation"
sudo -p "Input password for sudo: " printf "" || exit 1

spinner "\nInitiating installation of GNU stow.. "
yes | sudo pacman -S stow
echo -e "\nGNU stow installation successful\n"

spinner "Initiating configuration stow for base applications... "

for dir in */; do
    dir=$(echo "$dir" | sed 's/\/*$//g')
    if [[ ! ${non_base_config[@]} =~ $dir ]]; then
        echo "Stowing configurations for $dir..."
        stow "$dir"
    fi
done

spinner "\nCreating fonts directory... "
mkdir -p "$host_font_dir"
echo -e "Font directory created at: $host_font_dir"
spinner "\nInitiating fonts stow and installation... "
for dir in "$stow_font_dir"/*/; do
    dir=${dir%*/}
    dir=${dir##*/}

    echo "Stowing font $dir..."
    stow -d "$stow_font_dir" -S "$dir" -t "$host_font_dir"
done
echo -e "\r"
fc-cache -fv

spinner "\nCreating org notes directory... "
mkdir -p "$host_org_notes_dir"
echo -e "Org notes directory created at: $host_org_notes_dir"

spinner "\nCreating work directories... "
for v in "${host_work_dirs[@]}"; do
    mkdir -p "$v"
    echo -e "Work directory created at: $v"
done

spinner "Detecting if yay is installed... "

if ! command -v yay &> /dev/null; then
    spinner "\nInitiating installation of yay... "
    sudo pacman -S --needed git base-devel
    git clone https://aur.archlinux.org/yay.git
    cd yay
    yes | makepkg -si
    rm -rf ../yay
    echo -e "\nyay installation successful\n"
else
    echo -e "yay installation detected\n"
fi

echo -e "The following packages will be installed:\n"
cat ./packages_base.txt
start_spinner "\nPreparing installation of packages... "
sleep 6
stop_spinner

yay -Syu --needed --noconfirm - < packages_base.txt

exit 1

gnome_shell_dir="$HOME/.local/share/gnome-shell"
gnome_extensions_dir="$gnome_shell_dir/extensions"

echo "Installing the following packages for gnome..."
cat ./gnome_packages.txt

sleep 5

yay -Syu --needed --noconfirm - < ./gnome_packages.txt

if [[ ! -d "$gnome_extensions_dir" ]]; then
    echo "Creating extensions directory: $gnome_extensions_dir"
    ln -s "$(pwd)/extensions" "$gnome_extensions_dir"
fi

echo -e "Establishing gnome configurations...\n"
dconf load / < ./gnome-config

echo -e "Removing special keybinds...\n"
gsettings set org.gnome.settings-daemon.plugins.media-keys rotate-video-lock-static "[]"

for f in ./extensions/*; do
    if [[ -d "$f" ]]; then
        extension=$(basename "$f")
        echo "Enabling extension $extension..."
        #gnome-extensions enable "$extension"
    fi
done

# Install VIM plugins
vim +'PlugInstall --sync' +qa

# Install tmux plugins
~/.tmux/plugins/tpm/scripts/install_plugins.sh

